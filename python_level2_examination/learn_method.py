# -*- coding: utf-8 -*-
## 函数相关未学习的考点

# 三种定义函数的方式
#
# # 参数不给默认值，需要强制传入
# def calc1(a, b):
#     print(a + b)
#
#
# # calc1() 这种写法会报错，calc1(1)这种写法也会报错
# # 必须要传入定义的2个参数，
# calc1(1, 2)
#
#
# # b是选填参数，可以不传，如果不传b，默认值是3，如果传了值,就是传的值
# def calc2(a, b=3):
#     print(a + b)
#
#
# # 不传b,b默认就是3
# calc2(1)
# # 传了b，b就不用默认值
# calc1(1, 2)

# 如果不按照顺序来会报错
# calc1(b=1, a)

# 补充上面的多个参数版本
def calc(a, b=2, c=3):
    print(a + b + c)

# 正常调用，也就是a=1,b=2,c=3
# calc(1, 2, 3)
# # 表示 a=1,b=1,c=3
# calc(1, b=1, c=3)
# # 会报错 a应该在首位,应该他不是选填参数
# #calc(b=1, c=1, 1)
# # 表示 a=1,b=1,c=1
# calc(1, c=1, b=1)
#
# # # b支持传多个值，但是星号只能放在最后一位参数
# # # def calc3(*b,a)就会报错
# def calc3(a, *b):
#     print(a)
#     print(b)
# #
# #
# # # 第一个参数1会给a，2 和 3会一口气给b，所以打印b的时候就是个元祖了
# calc3(1, 2, 3)
#
# # # 全局变量在函数中的作用域，全局变量就是指在函数外面的变量，相对的在函数内部的变量其实叫局部变量
# a = 2
# def update_variable():
#     # 注意，这里的a是局部变量，只是名字和外面的全局变量一样，这里的修改不会影响外面
#     a = 3
#     # 这里会更新，但是执行完函数a还是2不会修改，因为a是全局变量
#     print("函数中更新a = {}".format(a))
#
#
# update_variable()
# # # 执行函数后不会修改a的值
# print("函数调用后a的值是{}".format(a))
# # 使用global可以在函数中修改变量的值
a = 2


def update_variable():
    # 定义a是全局变量
    global a
    a = 3
    # 这里会更新，但是执行完函数a还是2不会修改，因为a是全局变量
    print("函数中更新a = {}".format(a))


update_variable()
# 执行函数后不会修改a的值
print("函数调用后a的值是{}".format(a))