# -*- coding: utf-8 -*-
# 生成当前系统时间下的时间戳
import time

# 从1970-1-1到现在总过过了多少毫秒
# a = time.time()
# print(a)
#
# # 常用格式化符号
# # %y 两位数的年份表示（00-99）
# # %Y 四位数的年份表示（000-9999）
# # %m 月份（01-12）
# # %d 月内中的一天（0-31）
# # %H 24小时制小时数（0-23）
# # %I 12小时制小时数（01-12）
# # %M 分钟数（00-59）
# # %S 秒（00-59）
# # %a 本地简化星期名称
# # %A 本地完整星期名称
# # %b 本地简化的月份名称
# # %B 本地完整的月份名称
#
# # 构建一个日期的时间 表示2022-05-02 02:30:01
# a = time.strptime("2 May 22 2 30 1", "%d %b %y %H %M %S")
# # 会输出一个对象结构
# print(a)
# 生成自定义格式，根据上面的%可以自定义
# a = time.strftime('%b %d %Y %H:%M:%S', time.gmtime(time.time()))
# print(a)
# 生成默认时间字符串
# a = time.asctime()
# print(a)
#
#
#
# # any判断传入的是数据是可以循环的数据，如果内容有一个为True,则为True

# a = [False, False, True]
# b = any(a)
# print(b)
# # 0、None、""空字符也等于false # todo 思考可以写if语句试试 (这里高亮是因为todo是编译器语法，表示代完成代码和python无关）
# a = [0, False, None, ""]
# b = any(a)
# print(b)
#
# # all判断传入的是数据是可以循环的数据，如果内容有一个为False,则为False
# a = [True, True, True]
# b = all(a)
# print(b)
# # # 0和None也等于false
# a = [True, True, None, 0, False]
# b = all(a)
# print(b)
# #
# # 定义复数（虚数） 数学中在，虚数的表达式就是 a + b * i，其中a,b是实数，且b不等于0,i的平方等于-1
# # python直接定义复数
# a = 3 + 6j
# # 输出复数
# print(a)
# # 输出实部
# print(a.real)
# # 输出虚部
# print(a.imag)
# # 输出该复数的共轭复数 共轭复数:两个实部相等，虚部互为相反数的复数
# print(a.conjugate())
# # 使用函数创建复数
a = complex(5, 6)
print(a)
#
# # 三目运算符
# java中我们有形如下方的写法
# a = b > 1 ? 2:3 表示如果b大于1就让a = 2否则就让a = 3
# python中这样实现
# 表示如果b大于1就让a = 2 否则a = 3
# b = 3
# a = 2 if b > 1 else 3
# print(a)
# # a = 3
# b = 0
# a = 2 if b > 1 else 3
# print(a)
#
# # del 直接删除变量 （尽量少用，因为python会自己进行内存回收，这里暂时不深入理解）
# # 基础类型
# a = 1
# del a
# # print(a) #会报错 变量已经不存在了
#
# # 删除数组中的某一位
# a = [1, 2, 3]
# del a[0]
# print(a) # 只会移除数组中的某一位
#
# # 删除字典中的某个key
# a = {'a':1, 'b':2}
# del a['a']
# print(a)
#
# # for else 语句
# # else也可以跟着for循环后面如果循环正常执行完会执行else语句
#
# a = [1, 2, 3]
# for x in a:
#     if x == 4:
#         print(1)
#         break
# else:
#     print("没有遇见break执行")

# # 遇见break结束的循环不会执行else语句
# a = [1, 2, 3]
# for x in a:
#     if x == 3:
#         print(1)
#         break
# else:
#     print("没有遇见break执行")

# # todo 思考：如果循环在函数里，break改成return 会执行else语句吗   -- 不会执行，return直接结束函数
#
#
#
# # 转义字符
# # 比如我们代码中有一些常用的符号比如双引号，我们如果要输出双引号
# a = """"""
# # 没有生效 首先里面的一对双引号是个空字符，他等价于a = "",所以还是空
# print(a)
# #
# # # 所以我们要表明这个双引号就是个字符,就在他的前面加斜杠
# a = "\"\""

# print(a)
#
# # # 如果我们输出一个双引号
# # a = """
# # print(a) # 这里直接将他理解成了这个是个注释了
# # 正确的做法是
# a = "\""
# print(a)
#
# 换个例子
# a = 'it's me'  这种之所所以报错是因为前面的2个引号识别成了一组了，所以后面那个引号就格格不入了
# # 解决1
# a = "it's me" # 这个只是绕过问题而已
# print(a)
# # 解决2 转义字符
# a = 'it\'s me'
# print(a)

# # 假设我们要输出的斜杠本身呢？
# # # 这里举个极端的例子 我们这里就是想在最后输出斜杠，但是发现他和最后一个单引号结合转义了
# # a = 'it\'s me\' # 报错
# # print(a)
# # 通过对斜杠加斜杠
# a = 'it\'s me\\'
# print(a)

# # 常见的转义字符有\n \t
#
#
# # 浮点数计算误差，浮点数在十进制的计算上会不准确，是因为计算机就计算执行的是二进制，转到10进制就不能很准确的表示了
# a = 0.1
# b = 0.2
# c = a + b
# print(c) # 会发现没有等于0.3
# # 所以不能直接判断浮点数是否相等
# if c == 0.3:
#     print("相等")
# else:
#     print("不等")
# # 解决办法，相减小于某个很小的数字，python可以用科学计数法表示一个数字
# if c - 0.3 < 1e-9:
#     print("相等")
# else:
#     print("不相等")
#
# # 2个数组大小比较,是按位比较的
# a = [1,2,3]
# b = [1,2,4]
# print(b > a)
# # 数据一样，长度不一样,因为b更长所以b大
# a = [1,2,3]
# b = [1,2,3,4]
# print(b > a)
#
# # 字符串同理（但不同的中文我们直观的看不出大小，可以用ord()计算ascii大小）
# a = '字符串同理'
# b = '字符串同1'
# print(b > a)
# a = '字符串同理'
# b = '字符串同理的'
# print(b > a)
# #
#
# # 位运算
#
# # 按位与，a和b的每一位都进行&操作，&操作类似物理电路图中并联串联开关。
# # &表示 两个都是1,则是1，否则是0
# #  0101
# #  &&&&
# #  1010
# #  0000
# a = 0b0101
# b = 0b1010
# c = a & b
# print(bin(c))
# # todo 可以定义一个其他的b试试
#
# # 按位或，a和b的每一位都进行|操作
# # |表示 只要有一个1就是1，否则就是0
# #  0101
# #  ||||
# #  1010
# #  1111
# a = 0b0101
# b = 0b1010
# c = a | b
# print(bin(c))
# # todo 可以定义一个其他的b试试
#
#
# # 按位异或，a和b的每一位都进行^操作
# # ^表示 不同就是是1，否则就是0
# #  0101
# #  ^^^^
# #  1011
# #  1110
a = 0b0101
b = 0b1011
c = a ^ b
print(bin(c))
# # todo 可以定义一个其他的b试试