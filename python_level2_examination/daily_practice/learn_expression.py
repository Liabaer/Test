# -*- coding: utf-8 -*-
# python表达式计算

# 传入一个字符串，可以自动计算成对应的类型
# a = "1 + 1"
# print(a)
# # 这里会自动执行加法
# a = eval(a)
# print(a)
# # 复杂计算，这里会先执行3的3次方，也就是9 * '18'，我们知道，字符串是可以执行乘法，相当于生成一个字符串由9个18组成
# a = "3 ** 3 * '18'"
# print(eval(a))
# # 更复杂的计算，会考虑优先级,有括号先执行括号里的，再执行乘方，再先乘除后加减
# a = "(2 + 3) * 2 // 3 ** 2 - 1"
# print(eval(a))
#
# # 除了四则运算，还会自动计算出对应的数据结构
# a = '[1,2,3]'
# # 自动识别字符串是[1,2,3]的数组，就可以执行数组的函数了
# a = eval(a)
# a.append(4)
# print(a)

# # # 识别集合
# a = '{1, 2, 3}'
# a = eval(a)
# a.remove(3)
# print(a)
# #
# # 识别字典
# 这个会报错，因为a如果是字符串的话就要用引号
# a = '{a:1, b:1, c:1}'
# a = eval(a)
# print(a)
# a = '{1:1, 2:1, 3:1}'
# a = eval(a)
# # 给字典添加新的key value
# a[4] = 1
# print(a)
# #
#
# # 这里讲一个集合有关的新知识
# # python的字典key必须是不可变类型的，常见的不可变类型有，字符串，数字，元祖。
# # 注意数组是可变的，比如你执行append，数组就会改变,如下例子就会报错：
# b = [1,2]
# a = {b:1} # 这里让b变成了key
# b.append(3) # 这里会让b变成1,2,3但是没有通知上面的a里面的key b变成1，2，3这里就会导致许多问题，从而让整个字典变的不稳定，所以python会让其报错，Java也是一样。

# 不可变的key 不会报错
# a = {'a': 1}
# a = {1:1}
# a = {(1,1): 1}
# #
# # sort复杂使用
#
# a = [
#     [5, 'c'],
#     [3, 'a'],
#     [2, 'a'],
#     [1, 'd']
# ]
#
# # 我们对二维数组a的第二列字母进行升序排序，字母相同就对第一列数字进行升序排序
# # 这里我们借用了元祖，x表示每一个对象[5,'c']之类
# # 我们根据题目意思首先要对字母先排序，字母相等就进行第一列排序，于是我们定义的元组就为(x[1], x[0])，这个就表示先按照第二列排序，再按照第一列排序
# # 这里reverse指定的是元祖的第一个元素升序和第二个元素都升序，默认本来就是false所以可以不写
# a.sort(key=lambda x:(x[1], x[0]), reverse=False)
# print(a)
#
# a = [
#     [5, 'c'],
#     [3, 'a'],
#     [2, 'a'],
#     [1, 'd']
# ]
# # 我们对二维数组a的第二列字母进行降序排序，字母相同就对第一列数字进行降序排序
# # reverse默认是false升序
# a.sort(key=lambda x:(x[1], x[0]), reverse=True)
# print(a)
#
# a = [
#     [5, 'c'],
#     [3, 'a'],
#     [2, 'a'],
#     [1, 'd']
# ]
# # 使用负号，可以针对某一位进行降序，先对第二列升序，再对第一列降序
# a.sort(key=lambda x: (x[1], -x[0]), reverse=False)
# # x[0]是一个数字，于是我们可以给x[0]加一个负号，这样就可以直接让他降序了
# print(a)
#
#
# # 其实对于一维数组，我们也不一定要用reverse
# a = [1,3,2]
# a.sort(key = lambda x:x, reverse=True)
# print(a)
# # 这样也可以
# a = [1,3,2]
# a.sort(key = lambda x:-x)
# print(a)

# 那么对于字符串就不能直接用负号逆序了
a = ['1', '3', '2']
# 会报错，因为字符串前面不能加负号，需要先转换成ascii
# a.sort(key = lambda x:-x)
# print(a)
a.sort(key=lambda x: -ord(x))
print(a)

# 字符串可以直接用reverse，他会自动ord
a = ['1', '3', '2']
a.sort(reverse=True)
print(a)

# 以上所有的reverse=False都可以省略不写，默认升序
